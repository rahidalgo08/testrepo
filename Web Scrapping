## Importamos e instalamos los paquetes necesarios
pip install beautifulsoup4
pip install requests

import sys
import requests
from bs4 import BeautifulSoup
import re
import unicodedata
import pandas as pd

# Definiremos las sgtes funciones a fin de poder facilitarnos el proceso de scrapear las tablas
def date_time(table_cells):
    """
    This function returns the data and time from the HTML  table cell
    Input: the  element of a table data cell extracts extra row
    """
    return [data_time.strip() for data_time in list(table_cells.strings)][0:2]

def booster_version(table_cells):
    """
    This function returns the booster version from the HTML  table cell 
    Input: the  element of a table data cell extracts extra row
    """
    out=''.join([booster_version for i,booster_version in enumerate( table_cells.strings) if i%2==0][0:-1])
    return out

def landing_status(table_cells):
    """
    This function returns the landing status from the HTML table cell 
    Input: the  element of a table data cell extracts extra row
    """
    out=[i for i in table_cells.strings][0]
    return out


def get_mass(table_cells):
    mass=unicodedata.normalize("NFKD", table_cells.text).strip()
    if mass:
        mass.find("kg")
        new_mass=mass[0:mass.find("kg")+2]
    else:
        new_mass=0
    return new_mass


def extract_column_from_header(row):
    """
    This function returns the landing status from the HTML table cell 
    Input: the  element of a table data cell extracts extra row
    """
    if (row.br):
        row.br.extract()
    if row.a:
        row.a.extract()
    if row.sup:
        row.sup.extract()
        
    colunm_name = ' '.join(row.contents)
    
    # Filter the digit and empty names
    if not(colunm_name.strip().isdigit()):
        colunm_name = colunm_name.strip()
        return colunm_name    
    
static_url = "https://en.wikipedia.org/w/index.php?title=List_of_Falcon_9_and_Falcon_Heavy_launches&oldid=1027686922"    


## TASK 1. Requests the Falcon9 Launch Wiki page from its URL ###
# Primero ejecutamos un requets de Falcon9 Launch HTML page
response = requests.get(static_url).text

# Creamos un objeto BeautifulSoup del HTML response
soup = BeautifulSoup(response, 'html5lib')

# Imprime el título de la página para verificar si el objeto BeautifulSoup se creó correctamente.
title = soup.title.text
print("El título de la página es:", title)


## TASK 2. Extraer todos los nombres de las columnas/variables del HTML table header ##
# Encontrar todas las tablas en el HTML
html_tables = soup.find_all("table")

# Imprimir el número de tablas encontradas
print(f"Se encontraron {len(html_tables)} tablas.")

# Mostrar la primera tabla para verificar
print(html_tables[0])


# A partir de la tercera tabla, nuestra tabla de destino contiene los registros de lanzamiento
# reales.
first_launch_table = html_tables[2]
print(first_launch_table)

# A continuación, solo necesitamos iterar a través de los elementos <th> y aplicar el
# "extract_column_from_header()" proporcionado para extraer el nombre de la columna uno por uno.
# Lista para almacenar los nombres de las columnas
column_names = []

# Iterar a través de cada elemento <th> y aplicar extract_column_from_header()
for th in first_launch_table.find_all("th"):
    column_name = extract_column_from_header(th)
    
    # Verificar que el nombre de la columna no esté vacío o sea None
    if column_name and len(column_name) > 0:
        column_names.append(column_name)

# Imprimir los nombres de las columnas
print("Nombres de las columnas:", column_names)


## TASK 3. Crea un dataframe analizandos las tablas HTML de lanzamiento ##
# Crearemos un diccionario vacio con claves de los nombres de las columnas extraídas en la
# tarea anterior. Más adelante, este diccionario se convertirá en un dataframe de Pandas.
launch_dict= dict.fromkeys(column_names)

# Remove an irrelvant column
del launch_dict['Date and time ( )']

# Let's initial the launch_dict with each value to be an empty list
launch_dict['Flight No.'] = []
launch_dict['Launch site'] = []
launch_dict['Payload'] = []
launch_dict['Payload mass'] = []
launch_dict['Orbit'] = []
launch_dict['Customer'] = []
launch_dict['Launch outcome'] = []
# Added some new columns
launch_dict['Version Booster']=[]
launch_dict['Booster landing']=[]
launch_dict['Date']=[]
launch_dict['Time']=[]


# A continuación, solo necesitamos completar launch_dict con registros de lanzamiento 
# extraídos de las filas de la tabla.

# Para simplificar el proceso de análisis, proporcionamos un fragmento de código incompleto a
# continuación para ayudarlo a completar el launch_dict. Complete el siguiente fragmento de 
# código con TODO o puede optar por escribir su propia lógica para analizar todas las tablas
# de inicio:
# Extraer todas las tablas que contienen la información de lanzamiento
extracted_row = 0

# Extraer todas las tablas que contienen la información de lanzamiento
for table_number, table in enumerate(soup.find_all('table', "wikitable plainrowheaders collapsible")):
    
    # Iterar a través de todas las filas de la tabla
    for rows in table.find_all("tr"):
        # Verificar si la fila contiene información relevante (con un número de vuelo)
        if rows.th:
            if rows.th.string:
                flight_number = rows.th.string.strip()
                flag = flight_number.isdigit()  # Verifica si el número de vuelo es un dígito
        else:
            flag = False
        
        # Obtener los elementos de la fila
        row = rows.find_all('td')
        
        # Si es una fila de datos válida (número de vuelo)
        if flag:
            extracted_row += 1

            # Flight Number value
            launch_dict["Flight No."].append(flight_number)
            
            # Obtener la fecha y la hora
            datatimelist = date_time(row[0])
            date = datatimelist[0].strip(',')
            time = datatimelist[1]
            
            # Date value
            launch_dict["Date"].append(date)
            
            # Time value
            launch_dict["Time"].append(time)

            # Booster version
            bv = booster_version(row[1])
            if not(bv):
                bv = row[1].a.string if row[1].a else ''  # Verifica si hay enlace
            launch_dict["Version Booster"].append(bv)
            
            # Launch Site
            launch_site = row[2].a.string if row[2].a else row[2].text.strip()  # Verifica si hay enlace
            launch_dict["Launch site"].append(launch_site)
            
            # Payload
            payload = row[3].a.string if row[3].a else row[3].text.strip()  # Verifica si hay enlace
            launch_dict["Payload"].append(payload)
            
            # Payload Mass
            payload_mass = get_mass(row[4])
            launch_dict["Payload mass"].append(payload_mass)
            
            # Orbit
            orbit = row[5].a.string if row[5].a else row[5].text.strip()  # Verifica si hay enlace
            launch_dict["Orbit"].append(orbit)
            
            # Customer
            customer = row[6].a.string if row[6].a else row[6].text.strip()  # Verifica si hay enlace
            launch_dict["Customer"].append(customer)
            
            # Launch outcome
            launch_outcome = list(row[7].strings)[0] if row[7] else ''  # Evitar si la celda está vacía
            launch_dict["Launch outcome"].append(launch_outcome)
            
            # Booster landing
            booster_landing = landing_status(row[8])
            launch_dict["Booster landing"].append(booster_landing)

# Verificar los primeros registros de launch_dict
print(launch_dict["Flight No."][:5])  # Imprime los primeros 5 registros de la columna "Flight No."


# Finalmente, creamos un dataframe
df= pd.DataFrame({ key:pd.Series(value) for key, value in launch_dict.items() })
df.head()
