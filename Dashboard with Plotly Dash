## Instalamos las librerías ##
python3.11 m pip install pandas dash
import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

## Descargamos el esqueleto del dashboard y el dataset ##
wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_dash.csv"

wget "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_3/spacex_dash_app.py"

python3.11 spacex_dash_app.py



### TASK 1: Add a Launch Site Drop-down Input Component ###
# We have four different launch sites and we would like to first see which one has the largest
# success count. Then, we would like to select one specific site and check its detailed success 
# rate (class=0 vs. class=1)

# Find and complete a commented dcc.Dropdown(id='site-dropdown',...) input with following
# attributes: id attribute with value site-dropdown, options attribute is a list of dict-like
# option objects (with label and value attributes). You can set the label and value all to be 
# the launch site names in the spacex_df and you need to include the default All option. e.g.,
  options=[{'label': 'All Sites', 'value': 'ALL'},{'label': 'site1', 'value': 'site1'}, ...]
# value attribute with default dropdown value to be ALL meaning all sites are selected
# placeholder attribute to show a text description about this input area,such as Select a Launch 
# Site here searchable attribute to be True so we can enter keywords to search launch sites

# Cargar el dataset
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv"

spacex_df = pd.read_csv(URL)

# Obtener los nombres únicos de los sitios de lanzamiento
launch_sites = spacex_df['Launch Site'].unique()

# Crear opciones para el dropdown, agregando "All Sites" como opción predeterminada
dropdown_options = [{'label': 'All Sites', 'value': 'ALL'}] + \
                   [{'label': site, 'value': site} for site in launch_sites]

# Inicializar la aplicación Dash
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard", style={'textAlign': 'center'}),
    
    # Dropdown para selección de sitio de lanzamiento
    dcc.Dropdown(
        id='site-dropdown',
        options=dropdown_options,
        value='ALL',  # Valor por defecto
        placeholder="Select a Launch Site here",
        searchable=True
    ),

    # Contenedor para gráficos o tablas (puedes agregar más elementos aquí)
    html.Div(id='output-container')
])



### TASK 2: Add a callback function to render success-pie-chart based on selected   ###
##  site dropdown                                                                   ###
# The general idea of this callback function is to get the selected launch site from 
# site-dropdown and render. Let’s add a callback function in spacex_dash_app.py including the
# following application logic:
    
# Input is set to be the "site-dropdown" dropdown, i.e., "Input(component_id='site-dropdown', 
# component_property='value')". Output to be the graph with id "success-pie-chart", i.e.,
# "Output(component_id='success-pie-chart', component_property='figure')". A "If-Else"
# statement to check if ALL sites were selected or just a specific launch site was selected
# If ALL sites are selected, we will use all rows in the dataframe "spacex_df" to render and 
# return a pie chart graph to show the total success launches (i.e., the total count of "class"
# column). If a specific launch site is selected, you need to filter the dataframe "spacex_df"
# first in order to include the only data for the selected site. Then, render and return a pie
# chart graph to show the success (class=1) count and failed (class=0) count for the selected 
# site.

# Here is an example of a callback function:
# Function decorator to specify function input and output
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
    )
def get_pie_chart(selected_site):
    if selected_site == 'ALL':
        # Contar el total de lanzamientos exitosos
        success_counts = spacex_df['class'].value_counts().reset_index()
        success_counts.columns = ['class', 'count']
        
        fig = px.pie(success_counts, 
                     values='count', 
                     names='class', 
                     title='Total Successful Launches for All Sites',
                     labels={'class': 'Launch Outcome'})
    else:
        # Filtrar el dataframe para el sitio seleccionado
        filtered_df = spacex_df[spacex_df['Launch Site'] == selected_site]
        
        # Contar los lanzamientos exitosos y fallidos
        site_counts = filtered_df['class'].value_counts().reset_index()
        site_counts.columns = ['class', 'count']
        
        fig = px.pie(site_counts, 
                     values='count', 
                     names='class', 
                     title=f'Success vs Failure for {selected_site}',
                     labels={'class': 'Launch Outcome'})
    
    return fig



### TASK 3: Add a Range Slider to Select Payload ###
# Next, we want to find if variable payload is correlated to mission outcome. From a dashboard
# point of view, we want to be able to easily select different payload range and see if we can
# identify some visual patterns.

# Find and complete a commented dcc.RangeSlider(id='payload-slider',...) input with the 
# following attribute:
    # "id" to be "payload-slider"
    # "min" indicating the slider starting point, we set its value to be 0 (Kg)
    # "max" indicating the slider ending point to, we set its value to be 10000 (Kg)
    # "step" indicating the slider interval on the slider, we set its value to be 1000 (Kg)
    # "value" indicating the current selected range, we could set it to be "min_payload" and
    # "max_payload"
    
# Obtener los valores mínimo y máximo de payload
min_payload = spacex_df['Payload Mass (kg)'].min()
max_payload = spacex_df['Payload Mass (kg)'].max()

app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard", style={'textAlign': 'center'}),
    
    # Dropdown para selección de sitio de lanzamiento
    dcc.Dropdown(
        id='site-dropdown',
        options=dropdown_options,
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),

    # Agregar el RangeSlider para seleccionar el rango de carga útil
    html.Br(),
    html.P("Select Payload Range (Kg):"),
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        marks={i: str(i) for i in range(0, 10001, 2000)},
        value=[min_payload, max_payload]
    ),

    # Gráfico de pastel
    html.Br(),
    dcc.Graph(id='success-pie-chart'),

    # Contenedor para otros gráficos o tablas
    html.Div(id='output-container')
])



### TASK 4: Add a callback function to render the success-payload-scatter-chart scatter ###
### plot                                                                                ###

# Next, we want to plot a scatter plot with the x axis to be the payload and the y axis to be
# the launch outcome (i.e., "class" column). As such, we can visually observe how payload may
# be correlated with mission outcomes for selected site(s).

# In addition, we want to color-label the Booster version on each scatter point so that we may
# observe mission outcomes with different boosters.

# Now, let’s add a call function including the following application logic:
# "Input to be [Input(component_id='site-dropdown', component_property='value'), 
# Input(component_id="payload-slider", component_property="value")]"
# Note that we have two input components, one to receive selected launch site and another to 
# receive selected payload range.

# Output to be "Output(component_id='success-payload-scatter-chart',
# component_property='figure')".

# A If-Else statement to check if ALL sites were selected or just a specific launch site was 
# selected:
#   If ALL sites are selected, render a scatter plot to display all values for variable 
#   "Payload Mass (kg)" and variable "class".
#   In addition, the point color needs to be set to the booster version i.e., 
#   "color="Booster Version Category"
#   If a specific launch site is selected, you need to filter the "spacex_df" first, and 
#   render a scatter chart to show values "Payload Mass (kg)" and "class" for the selected 
#   site, and color-label the point using "Boosster Version Category" likewise.

@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def update_scatter_plot(selected_site, payload_range):
    # Filtrar datos por rango de carga útil
    filtered_df = spacex_df[
        (spacex_df['Payload Mass (kg)'] >= payload_range[0]) & 
        (spacex_df['Payload Mass (kg)'] <= payload_range[1])
    ]

    # Filtrar por sitio de lanzamiento si no se ha seleccionado "ALL"
    if selected_site != 'ALL':
        filtered_df = filtered_df[filtered_df['Launch Site'] == selected_site]

    # Crear gráfico de dispersión
    fig = px.scatter(
        filtered_df, 
        x='Payload Mass (kg)', 
        y='class', 
        color='Booster Version Category',
        title=('Success Rate vs. Payload Mass for ' + selected_site if selected_site != 'ALL' 
               else 'Success Rate vs. Payload Mass for All Sites'),
        labels={'class': 'Launch Outcome'}
    )
    
    return fig




### El código todo completo sería ###
# Importar librerías necesarias
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Leer el dataset
URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv"
spacex_df = pd.read_csv(URL)

# Obtener valores mínimo y máximo de carga útil
min_payload = spacex_df["Payload Mass (kg)"].min()
max_payload = spacex_df["Payload Mass (kg)"].max()

# Crear opciones para el dropdown de sitios de lanzamiento
dropdown_options = [{'label': 'All Sites', 'value': 'ALL'}] + \
                   [{'label': site, 'value': site} for site in spacex_df['Launch Site'].unique()]

# Inicializar la aplicación Dash
app = dash.Dash(__name__)

# Definir el layout de la aplicación
app.layout = html.Div([
    html.H1("SpaceX Launch Dashboard", style={'textAlign': 'center'}),

    # Dropdown para selección de sitio de lanzamiento
    dcc.Dropdown(
        id='site-dropdown',
        options=dropdown_options,
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),

    html.Br(),

    # Gráfico de pastel de éxito de lanzamientos
    dcc.Graph(id='success-pie-chart'),

    html.Br(),

    # Slider para seleccionar el rango de carga útil
    html.P("Select Payload Range (Kg):"),
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        marks={i: str(i) for i in range(0, 10001, 2000)},
        value=[min_payload, max_payload]
    ),

    html.Br(),

    # Gráfico de dispersión de éxito vs carga útil
    dcc.Graph(id='success-payload-scatter-chart'),
])

# Callback para actualizar el gráfico de pastel basado en el sitio seleccionado
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(selected_site):
    if selected_site == 'ALL':
        success_counts = spacex_df['class'].value_counts().reset_index()
        success_counts.columns = ['class', 'count']
        fig = px.pie(success_counts, 
                     values='count', 
                     names='class', 
                     title='Total Successful Launches for All Sites',
                     labels={'class': 'Launch Outcome'})
    else:
        filtered_df = spacex_df[spacex_df['Launch Site'] == selected_site]
        site_counts = filtered_df['class'].value_counts().reset_index()
        site_counts.columns = ['class', 'count']
        fig = px.pie(site_counts, 
                     values='count', 
                     names='class', 
                     title=f'Success vs Failure for {selected_site}',
                     labels={'class': 'Launch Outcome'})
    
    return fig

# Callback para actualizar el gráfico de dispersión basado en el sitio y rango de carga útil seleccionados
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
     Input(component_id='payload-slider', component_property='value')]
)
def update_scatter_plot(selected_site, payload_range):
    filtered_df = spacex_df[
        (spacex_df['Payload Mass (kg)'] >= payload_range[0]) & 
        (spacex_df['Payload Mass (kg)'] <= payload_range[1])
    ]

    if selected_site != 'ALL':
        filtered_df = filtered_df[filtered_df['Launch Site'] == selected_site]

    fig = px.scatter(
        filtered_df, 
        x='Payload Mass (kg)', 
        y='class', 
        color='Booster Version Category',
        title=('Success Rate vs. Payload Mass for ' + selected_site if selected_site != 'ALL' 
               else 'Success Rate vs. Payload Mass for All Sites'),
        labels={'class': 'Launch Outcome'}
    )
    
    return fig

# Ejecutar la aplicación
if __name__ == '__main__':
    app.run_server(debug=True)
    
    
## Para ejecutarlo, ponemos el sgte código en la terminal ##
python3.11 spacex_dash_app.py
