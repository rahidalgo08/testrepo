## Importamos las librerías ##
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier


## Esta función es para graficar la matrix de confución ##
def plot_confusion_matrix(y,y_predict):
    "this function plots the confusion matrix"
    from sklearn.metrics import confusion_matrix

    cm = confusion_matrix(y, y_predict)
    ax= plt.subplot()
    sns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells
    ax.set_xlabel('Predicted labels')
    ax.set_ylabel('True labels')
    ax.set_title('Confusion Matrix'); 
    ax.xaxis.set_ticklabels(['did not land', 'land']); ax.yaxis.set_ticklabels(['did not land', 'landed']) 
    plt.show() 
    
    
## Cargamos el dataset ##  
URL1 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"  
data = pd.read_csv(URL1)
data.head()

URL2 = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv'
X = pd.read_csv(URL2)
X.head(100)



### TASK 1: Create a NumPy array from the column "Class" in data, by applying the method    ###
### "to_numpy()" then assign it to the variable "Y",make sure the output is a Pandas        ###
### series (only one bracket df['name of column'])                                          ###
Y = data["Class"].to_numpy()
Y



### TASK 2: Standardize the data in "X" then reassign it to the variable X using the        ###
### transform provided below.                                                               ###
transform = preprocessing.StandardScaler()
X = transform.fit_transform(X)
X


# Dividimos los datos en datos de entrenamiento y prueba usando la función "train_test_split". 
# Los datos de entrenamiento se dividen en datos de validación, un segundo conjunto se utiliza 
# para los datos de entrenamiento; luego se entrenan los modelos y se seleccionan los
# hiperparámetros usando la función "GridSearchCV".

### TASK 3: Use the function "train_test_split" to split the data "X" and "Y" into training ###
### and test data. Set the parameter "test_size" to 0.2 and "random_state" to 2. The        ###
### training data and test data should be assigned to the following labels.                 ###
### X_train, X_test, Y_train, Y_test                                                        ###
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

# Podemos ver que solo tenemos 18 muestras de prueba.
Y_test.shape



### TASK 4: Create a logistic regression object then create a "GridSearchCV" object         ###
### "logreg_cv" with cv = 10. Fit the object to find the best parameters from the           ###
### dictionary "parameters                                                                  ###
parameters ={'C':[0.01,0.1,1],
             'penalty':['l2'],
             'solver':['lbfgs']}

parameters ={"C":[0.01,0.1,1],'penalty':['l2'], 'solver':['lbfgs']}     # l1 lasso l2 ridge
lr=LogisticRegression()

# Crear el objeto GridSearchCV con validación cruzada de 10
logreg_cv = GridSearchCV(lr, parameters, cv=10)

# Ajustar el modelo a los datos de entrenamiento
logreg_cv.fit(X_train, Y_train)

# Generamos el objeto "GridSearchCV" para regresión logística. Mostramos los mejores parámetros
# usando el atributo de datos "best_params_" y la precisión de los datos de validación usando
# el atributo de datos "best_score_".
print("tuned hpyerparameters :(best parameters) ",logreg_cv.best_params_)
print("accuracy :",logreg_cv.best_score_)



### TASK 5: Calculate the accuracy on the test data using the method "score":               ###
# Calcular la precisión en los datos de prueba
test_accuracy = logreg_cv.score(X_test, Y_test)

# Imprimir la precisión
print("Precisión en el conjunto de prueba:", test_accuracy)

# Echemos un vistazo a la matriz confusion:
yhat=logreg_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)



### TASK 6: Create a support vector machine object then create a "GridSearchCV" object     ###
### "svm_cv" with cv = 10. Fit the object to find the best parameters from the dictionary  ###
### "parameters".                                                                          ###
parameters = {'kernel':('linear', 'rbf','poly', 'sigmoid'),
              'C': np.logspace(-3, 3, 5),
              'gamma':np.logspace(-3, 3, 5)}
svm = SVC() 
svm_cv = GridSearchCV(svm, parameters, cv=10)
svm_cv.fit(X_train, Y_train)                    # Ajustamos el modelos a datos entrenamiento
print("tuned hpyerparameters :(best parameters) ",svm_cv.best_params_)
print("accuracy :",svm_cv.best_score_)



### TASK 7: Calculate the accuracy on the test data using the method "score":              ###
# Calcular la precisión en los datos de prueba
test_accuracy2 = svm_cv.score(X_test, Y_test)
print("Precisión en el conjunto de prueba:", test_accuracy2)

# Echemos un vistazo a la matriz confusion:
yhat=svm_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)



### TASK 8: Create a decision tree classifier object then create a "GridSearchCV" object   ###
## "tree_cv" with cv = 10. Fit the object to find the best parameters from the dictionary  ###
### "parameters".                                                                          ###
parameters = {'criterion': ['gini', 'entropy'],
     'splitter': ['best', 'random'],
     'max_depth': [2*n for n in range(1,10)],
     'max_features': ['sqrt', 'log2', None],
     'min_samples_leaf': [1, 2, 4],
     'min_samples_split': [2, 5, 10]}

tree = DecisionTreeClassifier()
tree_cv = GridSearchCV(tree, parameters, cv=10, error_score="raise")
tree_cv.fit(X_train, Y_train)
print("tuned hpyerparameters :(best parameters) ",tree_cv.best_params_)
print("accuracy :",tree_cv.best_score_)



### TASK 9: Calculate the accuracy of tree_cv on the test data using the method score:     ###
test_accuracy3 = tree_cv.score(X_test, Y_test)
print("Precisión en el conjunto de prueba:", test_accuracy3)

# Echemos un vistazo a la matriz confusion:
yhat = tree_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)



### TASK 10: Create a k nearest neighbors object then create a "GridSearchCV" object       ### 
### "knn_cv" with cv = 10. Fit the object to find the best parameters from the             ###
### dictionary "parameters".                                                               ###
parameters = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
              'p': [1,2]}

KNN = KNeighborsClassifier() 
knn_cv = GridSearchCV(KNN, parameters, cv=10)
knn_cv.fit(X_train, Y_train)
print("tuned hpyerparameters :(best parameters) ",knn_cv.best_params_)
print("accuracy :",knn_cv.best_score_)



### TASK 11: Calculate the accuracy of knn_cv on the test data using the method score:     ###
test_accuracy4 = knn_cv.score(X_test, Y_test)
print("Precisión en el conjunto de prueba:", test_accuracy4)

# Echemos un vistazo a la matriz confusion:
yhat = knn_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)



### TASK 12: Find the method performs best:                                                ###
# Comparar la precisión de los modelos
print("Logistic Regression Best Accuracy:", logreg_cv.best_score_)
print("SVM Best Accuracy:", svm_cv.best_score_)
print("Decision Tree Best Accuracy:", tree_cv.best_score_)
print("KNN Best Accuracy:", knn_cv.best_score_)

# Encontrar el mejor modelo
best_model = max([
    ("Logistic Regression", logreg_cv.best_score_),
    ("SVM", svm_cv.best_score_),
    ("Decision Tree", tree_cv.best_score_),
    ("KNN", knn_cv.best_score_)
], key=lambda x: x[1])

print(f"\n🔹 The best performing model is: {best_model[0]} with accuracy: {best_model[1]:.4f}")
